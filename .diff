diff --git a/frontend/appflowy_tauri/src-tauri/Cargo.toml b/frontend/appflowy_tauri/src-tauri/Cargo.toml
index 4759cf70b..253b18240 100644
--- a/frontend/appflowy_tauri/src-tauri/Cargo.toml
+++ b/frontend/appflowy_tauri/src-tauri/Cargo.toml
@@ -57,7 +57,7 @@ custom-protocol = ["tauri/custom-protocol"]
 # Run the script:
 # scripts/tool/update_client_api_rev.sh  new_rev_id
 # ⚠️⚠️⚠️️
-client-api = { git = "https://github.com/AppFlowy-IO/AppFlowy-Cloud", rev = "2159c68688a69af83e1c8d07cf17c40f0c315566" }
+client-api = { git = "https://github.com/AppFlowy-IO/AppFlowy-Cloud", rev = "9066766981128eb0fbce0dc6169b52444c7fcefd" }
 # Please use the following script to update collab.
 # Working directory: frontend
 #
diff --git a/frontend/rust-lib/Cargo.lock b/frontend/rust-lib/Cargo.lock
index 7267919df..57d9172c0 100644
--- a/frontend/rust-lib/Cargo.lock
+++ b/frontend/rust-lib/Cargo.lock
@@ -95,6 +95,21 @@ dependencies = [
  "pin-project",
 ]
 
+[[package]]
+name = "alloc-no-stdlib"
+version = "2.0.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cc7bb162ec39d46ab1ca8c77bf72e890535becd1751bb45f64c597edb4c8c6b3"
+
+[[package]]
+name = "alloc-stdlib"
+version = "0.2.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "94fb8275041c72129eb51b7d0322c29b8387a0386127718b096429201a5d6ece"
+dependencies = [
+ "alloc-no-stdlib",
+]
+
 [[package]]
 name = "allocator-api2"
 version = "0.2.16"
@@ -125,7 +140,7 @@ checksum = "a4668cab20f66d8d020e1fbc0ebe47217433c1b6c8f2040faf858554e394ace6"
 [[package]]
 name = "app-error"
 version = "0.1.0"
-source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=2159c68688a69af83e1c8d07cf17c40f0c315566#2159c68688a69af83e1c8d07cf17c40f0c315566"
+source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=9066766981128eb0fbce0dc6169b52444c7fcefd#9066766981128eb0fbce0dc6169b52444c7fcefd"
 dependencies = [
  "anyhow",
  "reqwest",
@@ -133,6 +148,7 @@ dependencies = [
  "serde_json",
  "serde_repr",
  "thiserror",
+ "tokio",
  "url",
  "uuid",
 ]
@@ -460,6 +476,27 @@ dependencies = [
  "syn 1.0.109",
 ]
 
+[[package]]
+name = "brotli"
+version = "3.4.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "516074a47ef4bce09577a3b379392300159ce5b1ba2e501ff1c819950066100f"
+dependencies = [
+ "alloc-no-stdlib",
+ "alloc-stdlib",
+ "brotli-decompressor",
+]
+
+[[package]]
+name = "brotli-decompressor"
+version = "2.5.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "4e2e4afe60d7dd600fdd3de8d0f08c2b7ec039712e3b6137ff98b7004e82de4f"
+dependencies = [
+ "alloc-no-stdlib",
+ "alloc-stdlib",
+]
+
 [[package]]
 name = "bstr"
 version = "1.6.2"
@@ -620,12 +657,13 @@ dependencies = [
 [[package]]
 name = "client-api"
 version = "0.1.0"
-source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=2159c68688a69af83e1c8d07cf17c40f0c315566#2159c68688a69af83e1c8d07cf17c40f0c315566"
+source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=9066766981128eb0fbce0dc6169b52444c7fcefd#9066766981128eb0fbce0dc6169b52444c7fcefd"
 dependencies = [
  "anyhow",
  "app-error",
  "async-trait",
  "bincode",
+ "brotli",
  "bytes",
  "collab",
  "collab-entity",
@@ -1155,7 +1193,7 @@ checksum = "c2e66c9d817f1720209181c316d28635c050fa304f9c79e47a520882661b7308"
 [[package]]
 name = "database-entity"
 version = "0.1.0"
-source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=2159c68688a69af83e1c8d07cf17c40f0c315566#2159c68688a69af83e1c8d07cf17c40f0c315566"
+source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=9066766981128eb0fbce0dc6169b52444c7fcefd#9066766981128eb0fbce0dc6169b52444c7fcefd"
 dependencies = [
  "anyhow",
  "app-error",
@@ -1958,6 +1996,7 @@ dependencies = [
  "bytes",
  "flowy-error",
  "lib-infra",
+ "mime",
  "mime_guess",
  "reqwest",
  "serde",
@@ -2308,7 +2347,7 @@ dependencies = [
 [[package]]
 name = "gotrue"
 version = "0.1.0"
-source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=2159c68688a69af83e1c8d07cf17c40f0c315566#2159c68688a69af83e1c8d07cf17c40f0c315566"
+source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=9066766981128eb0fbce0dc6169b52444c7fcefd#9066766981128eb0fbce0dc6169b52444c7fcefd"
 dependencies = [
  "anyhow",
  "futures-util",
@@ -2324,7 +2363,7 @@ dependencies = [
 [[package]]
 name = "gotrue-entity"
 version = "0.1.0"
-source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=2159c68688a69af83e1c8d07cf17c40f0c315566#2159c68688a69af83e1c8d07cf17c40f0c315566"
+source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=9066766981128eb0fbce0dc6169b52444c7fcefd#9066766981128eb0fbce0dc6169b52444c7fcefd"
 dependencies = [
  "anyhow",
  "app-error",
@@ -2672,7 +2711,7 @@ dependencies = [
 [[package]]
 name = "infra"
 version = "0.1.0"
-source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=2159c68688a69af83e1c8d07cf17c40f0c315566#2159c68688a69af83e1c8d07cf17c40f0c315566"
+source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=9066766981128eb0fbce0dc6169b52444c7fcefd#9066766981128eb0fbce0dc6169b52444c7fcefd"
 dependencies = [
  "anyhow",
  "reqwest",
@@ -4038,7 +4077,7 @@ dependencies = [
 [[package]]
 name = "realtime-entity"
 version = "0.1.0"
-source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=2159c68688a69af83e1c8d07cf17c40f0c315566#2159c68688a69af83e1c8d07cf17c40f0c315566"
+source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=9066766981128eb0fbce0dc6169b52444c7fcefd#9066766981128eb0fbce0dc6169b52444c7fcefd"
 dependencies = [
  "anyhow",
  "bincode",
@@ -4060,7 +4099,7 @@ dependencies = [
 [[package]]
 name = "realtime-protocol"
 version = "0.1.0"
-source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=2159c68688a69af83e1c8d07cf17c40f0c315566#2159c68688a69af83e1c8d07cf17c40f0c315566"
+source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=9066766981128eb0fbce0dc6169b52444c7fcefd#9066766981128eb0fbce0dc6169b52444c7fcefd"
 dependencies = [
  "anyhow",
  "bincode",
@@ -4638,7 +4677,7 @@ dependencies = [
 [[package]]
 name = "shared_entity"
 version = "0.1.0"
-source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=2159c68688a69af83e1c8d07cf17c40f0c315566#2159c68688a69af83e1c8d07cf17c40f0c315566"
+source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=9066766981128eb0fbce0dc6169b52444c7fcefd#9066766981128eb0fbce0dc6169b52444c7fcefd"
 dependencies = [
  "anyhow",
  "app-error",
@@ -5936,7 +5975,7 @@ dependencies = [
 [[package]]
 name = "workspace-template"
 version = "0.1.0"
-source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=2159c68688a69af83e1c8d07cf17c40f0c315566#2159c68688a69af83e1c8d07cf17c40f0c315566"
+source = "git+https://github.com/AppFlowy-IO/AppFlowy-Cloud?rev=9066766981128eb0fbce0dc6169b52444c7fcefd#9066766981128eb0fbce0dc6169b52444c7fcefd"
 dependencies = [
  "anyhow",
  "async-trait",
diff --git a/frontend/rust-lib/Cargo.toml b/frontend/rust-lib/Cargo.toml
index b9a56fa12..84bdda5fc 100644
--- a/frontend/rust-lib/Cargo.toml
+++ b/frontend/rust-lib/Cargo.toml
@@ -107,7 +107,7 @@ incremental = false
 # Run the script:
 # scripts/tool/update_client_api_rev.sh  new_rev_id
 # ⚠️⚠️⚠️️
-client-api = { git = "https://github.com/AppFlowy-IO/AppFlowy-Cloud", rev = "2159c68688a69af83e1c8d07cf17c40f0c315566" }
+client-api = { git = "https://github.com/AppFlowy-IO/AppFlowy-Cloud", rev = "9066766981128eb0fbce0dc6169b52444c7fcefd" }
 # Please use the following script to update collab.
 # Working directory: frontend
 #
diff --git a/frontend/rust-lib/event-integration/tests/document/supabase_test/file_test.rs b/frontend/rust-lib/event-integration/tests/document/supabase_test/file_test.rs
index 5c4b9c860..d559579d4 100644
--- a/frontend/rust-lib/event-integration/tests/document/supabase_test/file_test.rs
+++ b/frontend/rust-lib/event-integration/tests/document/supabase_test/file_test.rs
@@ -29,14 +29,14 @@ async fn supabase_document_upload_text_file_test() {
     let url = storage_service.create_object(object).await.unwrap();
 
     let bytes = storage_service
-      .get_object_by_url(url.clone())
+      .get_object(url.clone())
       .await
       .unwrap();
     let s = String::from_utf8(bytes.to_vec()).unwrap();
     assert_eq!(s, "hello world");
 
     // Delete the text file
-    let _ = storage_service.delete_object_by_url(url).await;
+    let _ = storage_service.delete_object(url).await;
   }
 }
 
@@ -60,7 +60,7 @@ async fn supabase_document_upload_zip_file_test() {
 
     // Read zip file
     let zip_data = storage_service
-      .get_object_by_url(url.clone())
+      .get_object(url.clone())
       .await
       .unwrap();
     let reader = Cursor::new(zip_data);
@@ -79,7 +79,7 @@ async fn supabase_document_upload_zip_file_test() {
     }
 
     // Delete the zip file
-    let _ = storage_service.delete_object_by_url(url).await;
+    let _ = storage_service.delete_object(url).await;
   }
 }
 #[tokio::test]
@@ -101,7 +101,7 @@ async fn supabase_document_upload_image_test() {
     let url = storage_service.create_object(object).await.unwrap();
 
     let image_data = storage_service
-      .get_object_by_url(url.clone())
+      .get_object(url.clone())
       .await
       .unwrap();
 
@@ -113,6 +113,6 @@ async fn supabase_document_upload_image_test() {
     assert_eq!(image_data, local_data);
 
     // Delete the image
-    let _ = storage_service.delete_object_by_url(url).await;
+    let _ = storage_service.delete_object(url).await;
   }
 }
diff --git a/frontend/rust-lib/flowy-core/src/deps_resolve/document_deps.rs b/frontend/rust-lib/flowy-core/src/deps_resolve/document_deps.rs
index 650d59122..21f1a0f42 100644
--- a/frontend/rust-lib/flowy-core/src/deps_resolve/document_deps.rs
+++ b/frontend/rust-lib/flowy-core/src/deps_resolve/document_deps.rs
@@ -8,7 +8,7 @@ use flowy_document::entities::{DocumentSnapshotData, DocumentSnapshotMeta};
 use flowy_document::manager::{DocumentManager, DocumentSnapshotService, DocumentUserService};
 use flowy_document_deps::cloud::DocumentCloudService;
 use flowy_error::{FlowyError, FlowyResult};
-use flowy_storage::FileStorageService;
+use flowy_storage::ObjectStorageService;
 use flowy_user::manager::UserManager;
 
 pub struct DocumentDepsResolver();
@@ -18,7 +18,7 @@ impl DocumentDepsResolver {
     _database_manager: &Arc<DatabaseManager>,
     collab_builder: Arc<AppFlowyCollabBuilder>,
     cloud_service: Arc<dyn DocumentCloudService>,
-    storage_service: Weak<dyn FileStorageService>,
+    storage_service: Weak<dyn ObjectStorageService>,
   ) -> Arc<DocumentManager> {
     let user_service: Arc<dyn DocumentUserService> =
       Arc::new(DocumentUserImpl(user_manager.clone()));
diff --git a/frontend/rust-lib/flowy-core/src/integrate/trait_impls.rs b/frontend/rust-lib/flowy-core/src/integrate/trait_impls.rs
index 31757dabf..20590b2fe 100644
--- a/frontend/rust-lib/flowy-core/src/integrate/trait_impls.rs
+++ b/frontend/rust-lib/flowy-core/src/integrate/trait_impls.rs
@@ -23,14 +23,14 @@ use flowy_folder_deps::cloud::{
 };
 use flowy_server_config::af_cloud_config::AFCloudConfiguration;
 use flowy_server_config::supabase_config::SupabaseConfiguration;
-use flowy_storage::{FileStorageService, StorageObject};
+use flowy_storage::{ObjectStorageService, StorageObject};
 use flowy_user_deps::cloud::{UserCloudService, UserCloudServiceProvider};
 use flowy_user_deps::entities::{Authenticator, UserTokenState};
 use lib_infra::future::{to_fut, Fut, FutureResult};
 
 use crate::integrate::server::{Server, ServerProvider};
 
-impl FileStorageService for ServerProvider {
+impl ObjectStorageService for ServerProvider {
   fn create_object(&self, object: StorageObject) -> FutureResult<String, FlowyError> {
     let server = self.get_server();
     FutureResult::new(async move {
@@ -39,19 +39,19 @@ impl FileStorageService for ServerProvider {
     })
   }
 
-  fn delete_object_by_url(&self, object_url: String) -> FutureResult<(), FlowyError> {
+  fn delete_object(&self, object_url: String) -> FutureResult<(), FlowyError> {
     let server = self.get_server();
     FutureResult::new(async move {
       let storage = server?.file_storage().ok_or(FlowyError::internal())?;
-      storage.delete_object_by_url(object_url).await
+      storage.delete_object(object_url).await
     })
   }
 
-  fn get_object_by_url(&self, object_url: String) -> FutureResult<Bytes, FlowyError> {
+  fn get_object(&self, object_url: String) -> FutureResult<Bytes, FlowyError> {
     let server = self.get_server();
     FutureResult::new(async move {
       let storage = server?.file_storage().ok_or(FlowyError::internal())?;
-      storage.get_object_by_url(object_url).await
+      storage.get_object(object_url).await
     })
   }
 }
diff --git a/frontend/rust-lib/flowy-core/src/lib.rs b/frontend/rust-lib/flowy-core/src/lib.rs
index 576304d9b..dfb346acc 100644
--- a/frontend/rust-lib/flowy-core/src/lib.rs
+++ b/frontend/rust-lib/flowy-core/src/lib.rs
@@ -12,7 +12,7 @@ use flowy_database2::DatabaseManager;
 use flowy_document::manager::DocumentManager;
 use flowy_folder::manager::FolderManager;
 use flowy_sqlite::kv::StorePreferences;
-use flowy_storage::FileStorageService;
+use flowy_storage::ObjectStorageService;
 use flowy_task::{TaskDispatcher, TaskRunner};
 use flowy_user::manager::UserManager;
 use flowy_user::services::entities::UserConfig;
@@ -141,7 +141,7 @@ impl AppFlowyCore {
         &database_manager,
         collab_builder.clone(),
         server_provider.clone(),
-        Arc::downgrade(&(server_provider.clone() as Arc<dyn FileStorageService>)),
+        Arc::downgrade(&(server_provider.clone() as Arc<dyn ObjectStorageService>)),
       );
 
       let folder_manager = FolderDepsResolver::resolve(
diff --git a/frontend/rust-lib/flowy-document/src/event_handler.rs b/frontend/rust-lib/flowy-document/src/event_handler.rs
index 443eef382..cf20f2636 100644
--- a/frontend/rust-lib/flowy-document/src/event_handler.rs
+++ b/frontend/rust-lib/flowy-document/src/event_handler.rs
@@ -12,8 +12,8 @@ use std::task::{Context, Poll};
 use collab_document::blocks::{
   BlockAction, BlockActionPayload, BlockActionType, BlockEvent, BlockEventPayload, DeltaType,
 };
-use flowy_storage::{ObjectValue, StorageObject};
-use tokio::io::{self, AsyncWrite, AsyncWriteExt, AsyncReadExt};
+use flowy_storage::{ObjectIdentity, ObjectValue};
+use tokio::io::{self, AsyncReadExt, AsyncWrite, AsyncWriteExt};
 use tracing::{info, instrument};
 
 use flowy_error::{FlowyError, FlowyResult};
@@ -419,25 +419,28 @@ pub(crate) async fn upload_file_handler(
     .upgrade()
     .ok_or(FlowyError::internal().with_context("The file storage service is already dropped"))?;
 
-    let mut file = tokio::fs::File::open(&params.local_file_path).await?;
-    let mut content = Vec::new();
-    let n = file.read_to_end(& mut content).await?;
-    info!(
-      "read {} bytes from file: {}",
-      n, &params.local_file_path
-    );
+  let mut file = tokio::fs::File::open(&params.local_file_path).await?;
+  let mut content = Vec::new();
+  let n = file.read_to_end(&mut content).await?;
+  info!("read {} bytes from file: {}", n, &params.local_file_path);
 
   let hash = fxhash::hash(&content);
-  let mime: String = mime_guess::from_path(&params.local_file_path).first_or_octet_stream().to_string();
-  let url = file_service
-    .create_object(StorageObject {
-      workspace_id: params.workspace_id.clone(),
-      file_name: hash.to_string(),
-      value: ObjectValue::Bytes {
-          bytes: content.into(),
-          mime: mime.into(),
-    }})
-    .await?;
+  let mime: String = mime_guess::from_path(&params.local_file_path)
+    .first_or_octet_stream()
+    .to_string();
+
+  let url = file_service.get_object_url(ObjectIdentity {
+    workspace_id: params.workspace_id.to_owned(),
+    file_id: hash.to_string(),
+  });
+
+  file_service.put_object(
+    &url,
+    ObjectValue {
+      raw: content.into(),
+      mime: mime.to_string(),
+    },
+  );
 
   let local_file_path = params.local_file_path.to_owned();
   Ok(AFPluginData(UploadedFilePB {
@@ -463,7 +466,7 @@ pub(crate) async fn download_file_handler(
     .upgrade()
     .ok_or(FlowyError::internal().with_context("The file storage service is already dropped"))?;
 
-  let raw = file_service.get_object_by_url(params.url.clone()).await?;
+  let object_value = file_service.get_object(&params.url).await?;
 
   // create file if not exist
   let mut file = tokio::fs::OpenOptions::new()
@@ -472,7 +475,7 @@ pub(crate) async fn download_file_handler(
     .open(&path)
     .await?;
 
-  let n = file.write(raw.as_ref()).await?;
+  let n = file.write(&object_value.raw).await?;
   info!("downloaded {} bytes to file: {}", n, path);
   Ok(())
 }
@@ -487,9 +490,7 @@ pub(crate) async fn delete_uploaded_file_handler(
     .get_file_storage_service()
     .upgrade()
     .ok_or(FlowyError::internal().with_context("The file storage service is already dropped"))?;
-  file_service
-    .delete_object_by_url(params.url.clone())
-    .await?;
+  file_service.delete_object(&params.url).await?;
 
   tokio::fs::remove_file(&params.local_file_path).await?;
   Ok(())
diff --git a/frontend/rust-lib/flowy-document/src/manager.rs b/frontend/rust-lib/flowy-document/src/manager.rs
index f14fc042d..6438e646d 100644
--- a/frontend/rust-lib/flowy-document/src/manager.rs
+++ b/frontend/rust-lib/flowy-document/src/manager.rs
@@ -18,7 +18,7 @@ use collab_integrate::collab_builder::{AppFlowyCollabBuilder, CollabBuilderConfi
 use collab_integrate::{CollabKVAction, CollabKVDB, CollabPersistenceConfig};
 use flowy_document_deps::cloud::DocumentCloudService;
 use flowy_error::{internal_error, ErrorCode, FlowyError, FlowyResult};
-use flowy_storage::FileStorageService;
+use flowy_storage::ObjectStorageService;
 
 use crate::document::MutexDocument;
 use crate::entities::{
@@ -46,7 +46,7 @@ pub struct DocumentManager {
   collab_builder: Arc<AppFlowyCollabBuilder>,
   documents: Arc<Mutex<LruCache<String, Arc<MutexDocument>>>>,
   cloud_service: Arc<dyn DocumentCloudService>,
-  storage_service: Weak<dyn FileStorageService>,
+  storage_service: Weak<dyn ObjectStorageService>,
   snapshot_service: Arc<dyn DocumentSnapshotService>,
 }
 
@@ -55,7 +55,7 @@ impl DocumentManager {
     user_service: Arc<dyn DocumentUserService>,
     collab_builder: Arc<AppFlowyCollabBuilder>,
     cloud_service: Arc<dyn DocumentCloudService>,
-    storage_service: Weak<dyn FileStorageService>,
+    storage_service: Weak<dyn ObjectStorageService>,
     snapshot_service: Arc<dyn DocumentSnapshotService>,
   ) -> Self {
     let documents = Arc::new(Mutex::new(LruCache::new(NonZeroUsize::new(10).unwrap())));
@@ -298,7 +298,7 @@ impl DocumentManager {
   }
   /// Only expose this method for testing
   #[cfg(debug_assertions)]
-  pub fn get_file_storage_service(&self) -> &Weak<dyn FileStorageService> {
+  pub fn get_file_storage_service(&self) -> &Weak<dyn ObjectStorageService> {
     &self.storage_service
   }
 }
diff --git a/frontend/rust-lib/flowy-document/tests/document/util.rs b/frontend/rust-lib/flowy-document/tests/document/util.rs
index b20494f05..ba3fcc34f 100644
--- a/frontend/rust-lib/flowy-document/tests/document/util.rs
+++ b/frontend/rust-lib/flowy-document/tests/document/util.rs
@@ -23,7 +23,7 @@ use flowy_document::entities::{DocumentSnapshotData, DocumentSnapshotMeta};
 use flowy_document::manager::{DocumentManager, DocumentSnapshotService, DocumentUserService};
 use flowy_document_deps::cloud::*;
 use flowy_error::{ErrorCode, FlowyError, FlowyResult};
-use flowy_storage::{FileStorageService, StorageObject};
+use flowy_storage::{ObjectStorageService, StorageObject};
 use lib_infra::async_trait::async_trait;
 use lib_infra::future::{to_fut, Fut, FutureResult};
 
@@ -35,7 +35,7 @@ impl DocumentTest {
   pub fn new() -> Self {
     let user = FakeUser::new();
     let cloud_service = Arc::new(LocalTestDocumentCloudServiceImpl());
-    let file_storage = Arc::new(DocumentTestFileStorageService) as Arc<dyn FileStorageService>;
+    let file_storage = Arc::new(DocumentTestFileStorageService) as Arc<dyn ObjectStorageService>;
     let document_snapshot = Arc::new(DocumentTestSnapshot);
     let manager = DocumentManager::new(
       Arc::new(user),
diff --git a/frontend/rust-lib/flowy-server/src/af_cloud/impls/file_storage.rs b/frontend/rust-lib/flowy-server/src/af_cloud/impls/file_storage.rs
index 569ad3877..f9b222ea6 100644
--- a/frontend/rust-lib/flowy-server/src/af_cloud/impls/file_storage.rs
+++ b/frontend/rust-lib/flowy-server/src/af_cloud/impls/file_storage.rs
@@ -1,9 +1,6 @@
 use bytes::Bytes;
-use tokio::fs::File;
-use tokio::io::AsyncReadExt;
-
 use flowy_error::FlowyError;
-use flowy_storage::{FileStorageService, ObjectValue, StorageObject};
+use flowy_storage::{ObjectIdentity, ObjectStorageService, ObjectValue};
 use lib_infra::future::FutureResult;
 
 use crate::af_cloud::AFServer;
@@ -16,46 +13,41 @@ impl<T> AFCloudFileStorageServiceImpl<T> {
   }
 }
 
-impl<T> FileStorageService for AFCloudFileStorageServiceImpl<T>
+impl<T> ObjectStorageService for AFCloudFileStorageServiceImpl<T>
 where
   T: AFServer,
 {
-  fn create_object(&self, object: StorageObject) -> FutureResult<String, FlowyError> {
+  fn get_object_url(&self, object_id: &ObjectIdentity) -> FutureResult<String, FlowyError> {
     let try_get_client = self.0.try_get_client();
     FutureResult::new(async move {
       let client = try_get_client?;
+      let url = client.get_blob_url(&object_id.workspace_id, &object_id.file_id);
+      Ok(url)
+    })
+  }
 
-      match object.value {
-        ObjectValue::File { file_path } => {
-          let mut file = File::open(&file_path).await?;
-          let mime = mime_guess::from_path(file_path)
-            .first_or_octet_stream()
-            .to_string();
-          let mut buffer = Vec::new();
-          file.read_to_end(&mut buffer).await?;
-          Ok(client.put_blob(&object.workspace_id, buffer, mime).await?)
-        },
-        ObjectValue::Bytes { bytes, mime } => {
-          Ok(client.put_blob(&object.workspace_id, bytes, mime).await?)
-        },
-      }
+  fn put_object(&self, url: &str, file: &ObjectValue) -> FutureResult<(), FlowyError> {
+    let try_get_client = self.0.try_get_client();
+    FutureResult::new(async move {
+      let client = try_get_client?;
+      client.put_blob(url, file.raw, file.mime).await?;
     })
   }
 
-  fn delete_object_by_url(&self, object_url: String) -> FutureResult<(), FlowyError> {
+  fn delete_object(&self, url: &str) -> FutureResult<(), FlowyError> {
     let try_get_client = self.0.try_get_client();
     FutureResult::new(async move {
       let client = try_get_client?;
-      client.delete_blob(&object_url).await?;
+      client.delete_blob(url).await?;
       Ok(())
     })
   }
 
-  fn get_object_by_url(&self, object_url: String) -> FutureResult<Bytes, FlowyError> {
+  fn get_object(&self, url: &str) -> FutureResult<Bytes, FlowyError> {
     let try_get_client = self.0.try_get_client();
     FutureResult::new(async move {
       let client = try_get_client?;
-      let bytes = client.get_blob(&object_url).await?;
+      let bytes = client.get_blob(url).await?;
       Ok(bytes)
     })
   }
diff --git a/frontend/rust-lib/flowy-server/src/af_cloud/server.rs b/frontend/rust-lib/flowy-server/src/af_cloud/server.rs
index 26cc5d14d..b17a2de50 100644
--- a/frontend/rust-lib/flowy-server/src/af_cloud/server.rs
+++ b/frontend/rust-lib/flowy-server/src/af_cloud/server.rs
@@ -8,7 +8,7 @@ use client_api::notify::{TokenState, TokenStateReceiver};
 use client_api::ws::{
   ConnectState, WSClient, WSClientConfig, WSConnectStateReceiver, WebSocketChannel,
 };
-use client_api::Client;
+use client_api::{Client, ClientConfiguration};
 use tokio::sync::watch;
 use tokio_stream::wrappers::WatchStream;
 use tracing::{error, event, info};
@@ -18,7 +18,7 @@ use flowy_document_deps::cloud::DocumentCloudService;
 use flowy_error::{ErrorCode, FlowyError};
 use flowy_folder_deps::cloud::FolderCloudService;
 use flowy_server_config::af_cloud_config::AFCloudConfiguration;
-use flowy_storage::FileStorageService;
+use flowy_storage::ObjectStorageService;
 use flowy_user_deps::cloud::{UserCloudService, UserUpdate};
 use flowy_user_deps::entities::UserTokenState;
 use lib_dispatch::prelude::af_spawn;
@@ -45,7 +45,7 @@ pub struct AppFlowyCloudServer {
 
 impl AppFlowyCloudServer {
   pub fn new(config: AFCloudConfiguration, enable_sync: bool, device_id: String) -> Self {
-    let api_client = AFCloudClient::new(&config.base_url, &config.ws_base_url, &config.gotrue_url);
+    let api_client = AFCloudClient::new(&config.base_url, &config.ws_base_url, &config.gotrue_url, ClientConfiguration::default());
     let token_state_rx = api_client.subscribe_token_state();
     let enable_sync = Arc::new(AtomicBool::new(enable_sync));
     let network_reachable = Arc::new(AtomicBool::new(true));
@@ -206,7 +206,7 @@ impl AppFlowyServer for AppFlowyCloudServer {
     }
   }
 
-  fn file_storage(&self) -> Option<Arc<dyn FileStorageService>> {
+  fn file_storage(&self) -> Option<Arc<dyn ObjectStorageService>> {
     let client = AFServerImpl {
       client: self.get_client(),
     };
diff --git a/frontend/rust-lib/flowy-server/src/local_server/server.rs b/frontend/rust-lib/flowy-server/src/local_server/server.rs
index 8215dae2f..9f6cb2034 100644
--- a/frontend/rust-lib/flowy-server/src/local_server/server.rs
+++ b/frontend/rust-lib/flowy-server/src/local_server/server.rs
@@ -7,7 +7,7 @@ use flowy_database_deps::cloud::DatabaseCloudService;
 use flowy_document_deps::cloud::DocumentCloudService;
 use flowy_error::FlowyError;
 use flowy_folder_deps::cloud::FolderCloudService;
-use flowy_storage::FileStorageService;
+use flowy_storage::ObjectStorageService;
 // use flowy_user::services::database::{
 //   get_user_profile, get_user_workspace, open_collab_db, open_user_db,
 // };
@@ -67,7 +67,7 @@ impl AppFlowyServer for LocalServer {
     Arc::new(LocalServerDocumentCloudServiceImpl())
   }
 
-  fn file_storage(&self) -> Option<Arc<dyn FileStorageService>> {
+  fn file_storage(&self) -> Option<Arc<dyn ObjectStorageService>> {
     None
   }
 }
diff --git a/frontend/rust-lib/flowy-server/src/server.rs b/frontend/rust-lib/flowy-server/src/server.rs
index 234d5e947..0ecf145c6 100644
--- a/frontend/rust-lib/flowy-server/src/server.rs
+++ b/frontend/rust-lib/flowy-server/src/server.rs
@@ -11,7 +11,7 @@ use tokio_stream::wrappers::WatchStream;
 use flowy_database_deps::cloud::DatabaseCloudService;
 use flowy_document_deps::cloud::DocumentCloudService;
 use flowy_folder_deps::cloud::FolderCloudService;
-use flowy_storage::FileStorageService;
+use flowy_storage::ObjectStorageService;
 use flowy_user_deps::cloud::UserCloudService;
 use flowy_user_deps::entities::UserTokenState;
 use lib_infra::future::FutureResult;
@@ -131,7 +131,7 @@ pub trait AppFlowyServer: Send + Sync + 'static {
     FutureResult::new(async { Ok(None) })
   }
 
-  fn file_storage(&self) -> Option<Arc<dyn FileStorageService>>;
+  fn file_storage(&self) -> Option<Arc<dyn ObjectStorageService>>;
 }
 
 pub struct EncryptionImpl {
diff --git a/frontend/rust-lib/flowy-server/src/supabase/file_storage/builder.rs b/frontend/rust-lib/flowy-server/src/supabase/file_storage/builder.rs
index 8a670d6be..ba29a486f 100644
--- a/frontend/rust-lib/flowy-server/src/supabase/file_storage/builder.rs
+++ b/frontend/rust-lib/flowy-server/src/supabase/file_storage/builder.rs
@@ -12,7 +12,6 @@ use tokio::fs::File;
 use tokio::io::AsyncReadExt;
 use url::Url;
 
-use flowy_storage::StorageObject;
 
 use crate::supabase::file_storage::{DeleteObjects, FileOptions, NewBucket, RequestBody};
 
@@ -95,7 +94,7 @@ impl StorageRequestBuilder {
       .unwrap()
       .push("object")
       .push(bucket_name)
-      .push(&object.file_name);
+      .push(&object.file_id);
 
     self.body = (options, object.value).into();
 
diff --git a/frontend/rust-lib/flowy-server/src/supabase/file_storage/core.rs b/frontend/rust-lib/flowy-server/src/supabase/file_storage/core.rs
index 76bc3bd4a..19f0384a3 100644
--- a/frontend/rust-lib/flowy-server/src/supabase/file_storage/core.rs
+++ b/frontend/rust-lib/flowy-server/src/supabase/file_storage/core.rs
@@ -11,7 +11,7 @@ use url::Url;
 use flowy_encrypt::{decrypt_data, encrypt_data};
 use flowy_error::FlowyError;
 use flowy_server_config::supabase_config::SupabaseConfiguration;
-use flowy_storage::{FileStoragePlan, FileStorageService, StorageObject};
+use flowy_storage::{ObjectStorageService };
 use lib_infra::future::FutureResult;
 
 use crate::response::ExtendedResponse;
@@ -24,41 +24,7 @@ pub struct SupabaseFileStorage {
   client: Client,
   #[allow(dead_code)]
   encryption: ObjectEncryption,
-  storage_plan: Arc<dyn FileStoragePlan>,
-}
-
-impl SupabaseFileStorage {
-  pub fn new(
-    config: &SupabaseConfiguration,
-    encryption: Weak<dyn AppFlowyEncryption>,
-    storage_plan: Arc<dyn FileStoragePlan>,
-  ) -> Result<Self, Error> {
-    let mut headers = HeaderMap::new();
-    let url = format!("{}/storage/v1", config.url);
-    let auth = format!("Bearer {}", config.anon_key);
-
-    headers.insert(
-      "Authorization",
-      HeaderValue::from_str(&auth).expect("Authorization is invalid"),
-    );
-    headers.insert(
-      "apikey",
-      HeaderValue::from_str(&config.anon_key).expect("apikey value is invalid"),
-    );
-
-    let encryption = ObjectEncryption::new(encryption);
-    Ok(Self {
-      url: Url::parse(&url)?,
-      headers,
-      client: Client::new(),
-      encryption,
-      storage_plan,
-    })
-  }
-
-  pub fn storage(&self) -> StorageRequestBuilder {
-    StorageRequestBuilder::new(self.url.clone(), self.headers.clone(), self.client.clone())
-  }
+  storage_plan: Arc<dyn SupabaseStoragePlan>,
 }
 
 impl FileStorageService for SupabaseFileStorage {
@@ -115,6 +81,38 @@ impl FileStorageService for SupabaseFileStorage {
   }
 }
 
+impl SupabaseFileStorage {
+  pub fn new(
+    config: &SupabaseConfiguration,
+    encryption: Weak<dyn AppFlowyEncryption>,
+  ) -> Result<Self, Error> {
+    let mut headers = HeaderMap::new();
+    let url = format!("{}/storage/v1", config.url);
+    let auth = format!("Bearer {}", config.anon_key);
+
+    headers.insert(
+      "Authorization",
+      HeaderValue::from_str(&auth).expect("Authorization is invalid"),
+    );
+    headers.insert(
+      "apikey",
+      HeaderValue::from_str(&config.anon_key).expect("apikey value is invalid"),
+    );
+
+    let encryption = ObjectEncryption::new(encryption);
+    Ok(Self {
+      url: Url::parse(&url)?,
+      headers,
+      client: Client::new(),
+      encryption,
+    })
+  }
+
+  pub fn storage(&self) -> StorageRequestBuilder {
+    StorageRequestBuilder::new(self.url.clone(), self.headers.clone(), self.client.clone())
+  }
+}
+
 #[allow(dead_code)]
 struct ObjectEncryption {
   encryption: Weak<dyn AppFlowyEncryption>,
diff --git a/frontend/rust-lib/flowy-server/src/supabase/server.rs b/frontend/rust-lib/flowy-server/src/supabase/server.rs
index d0f0551c7..701d466f0 100644
--- a/frontend/rust-lib/flowy-server/src/supabase/server.rs
+++ b/frontend/rust-lib/flowy-server/src/supabase/server.rs
@@ -9,7 +9,7 @@ use flowy_database_deps::cloud::DatabaseCloudService;
 use flowy_document_deps::cloud::DocumentCloudService;
 use flowy_folder_deps::cloud::FolderCloudService;
 use flowy_server_config::supabase_config::SupabaseConfiguration;
-use flowy_storage::FileStorageService;
+use flowy_storage::ObjectStorageService;
 use flowy_user_deps::cloud::UserCloudService;
 
 use crate::supabase::api::{
@@ -187,11 +187,11 @@ impl AppFlowyServer for SupabaseServer {
     )))
   }
 
-  fn file_storage(&self) -> Option<Arc<dyn FileStorageService>> {
+  fn file_storage(&self) -> Option<Arc<dyn ObjectStorageService>> {
     self
       .file_storage
       .read()
       .clone()
-      .map(|s| s as Arc<dyn FileStorageService>)
+      .map(|s| s as Arc<dyn ObjectStorageService>)
   }
 }
diff --git a/frontend/rust-lib/flowy-server/tests/supabase_test/file_test.rs b/frontend/rust-lib/flowy-server/tests/supabase_test/file_test.rs
index d38818277..5f2362548 100644
--- a/frontend/rust-lib/flowy-server/tests/supabase_test/file_test.rs
+++ b/frontend/rust-lib/flowy-server/tests/supabase_test/file_test.rs
@@ -29,7 +29,7 @@ async fn supabase_get_object_test() {
   assert_eq!(name, &file_name);
 
   // Download the file
-  let bytes = service.get_object_by_url(url.to_string()).await.unwrap();
+  let bytes = service.get_object(url.to_string()).await.unwrap();
   let s = String::from_utf8(bytes.to_vec()).unwrap();
   assert_eq!(s, "hello world");
 }
@@ -53,7 +53,7 @@ async fn supabase_upload_image_test() {
     .unwrap();
 
   // Download object by url
-  let bytes = service.get_object_by_url(url.to_string()).await.unwrap();
+  let bytes = service.get_object(url.to_string()).await.unwrap();
   assert_eq!(bytes.len(), 15694);
 }
 
@@ -68,11 +68,11 @@ async fn supabase_delete_object_test() {
   let object = StorageObject::from_file("1", &file_name, "tests/test.txt");
   let url = service.create_object(object).await.unwrap();
 
-  let result = service.get_object_by_url(url.clone()).await;
+  let result = service.get_object(url.clone()).await;
   assert!(result.is_ok());
 
-  let _ = service.delete_object_by_url(url.clone()).await;
+  let _ = service.delete_object(url.clone()).await;
 
-  let result = service.get_object_by_url(url.clone()).await;
+  let result = service.get_object(url.clone()).await;
   assert!(result.is_err());
 }
diff --git a/frontend/rust-lib/flowy-server/tests/supabase_test/util.rs b/frontend/rust-lib/flowy-server/tests/supabase_test/util.rs
index b0ab3028b..467e6488f 100644
--- a/frontend/rust-lib/flowy-server/tests/supabase_test/util.rs
+++ b/frontend/rust-lib/flowy-server/tests/supabase_test/util.rs
@@ -17,7 +17,7 @@ use flowy_server::supabase::define::{USER_DEVICE_ID, USER_EMAIL, USER_UUID};
 use flowy_server::supabase::file_storage::core::SupabaseFileStorage;
 use flowy_server::{AppFlowyEncryption, EncryptionImpl};
 use flowy_server_config::supabase_config::SupabaseConfiguration;
-use flowy_storage::{FileStoragePlan, FileStorageService, StorageObject};
+use flowy_storage::{FileStoragePlan, ObjectStorageService, StorageObject};
 use flowy_user_deps::cloud::UserCloudService;
 use lib_infra::future::FutureResult;
 
@@ -60,7 +60,7 @@ pub fn folder_service() -> Arc<dyn FolderCloudService> {
   Arc::new(SupabaseFolderServiceImpl::new(server))
 }
 
-pub fn file_storage_service() -> Arc<dyn FileStorageService> {
+pub fn file_storage_service() -> Arc<dyn ObjectStorageService> {
   let encryption_impl: Arc<dyn AppFlowyEncryption> = Arc::new(EncryptionImpl::new(None));
   let config = SupabaseConfiguration::from_env().unwrap();
   Arc::new(
diff --git a/frontend/rust-lib/flowy-storage/Cargo.toml b/frontend/rust-lib/flowy-storage/Cargo.toml
index 73c68222e..1aa772733 100644
--- a/frontend/rust-lib/flowy-storage/Cargo.toml
+++ b/frontend/rust-lib/flowy-storage/Cargo.toml
@@ -15,3 +15,4 @@ mime_guess = "2.0"
 lib-infra = { workspace = true }
 url = "2.2.2"
 flowy-error = { workspace = true, features = ["impl_from_reqwest"] }
+mime = "0.3.17"
diff --git a/frontend/rust-lib/flowy-storage/src/lib.rs b/frontend/rust-lib/flowy-storage/src/lib.rs
index 5071933b7..8a4599a38 100644
--- a/frontend/rust-lib/flowy-storage/src/lib.rs
+++ b/frontend/rust-lib/flowy-storage/src/lib.rs
@@ -1,115 +1,57 @@
-use bytes::Bytes;
-
 use flowy_error::FlowyError;
 use lib_infra::future::FutureResult;
 
-pub struct StorageObject {
+pub struct ObjectIdentity {
   pub workspace_id: String,
-  pub file_name: String,
-  pub value: ObjectValue,
+  pub file_id: String,
 }
 
-impl StorageObject {
-  /// Creates a `StorageObject` from a file.
-  ///
-  /// # Parameters
-  ///
-  /// * `name`: The name of the storage object.
-  /// * `file_path`: The file path to the storage object's data.
-  ///
-  pub fn from_file<T: ToString>(workspace_id: &str, file_name: &str, file_path: T) -> Self {
-    Self {
-      workspace_id: workspace_id.to_string(),
-      file_name: file_name.to_string(),
-      value: ObjectValue::File {
-        file_path: file_path.to_string(),
-      },
-    }
-  }
+pub struct ObjectValue {
+  pub raw: Box<[u8]>,
+  pub mime: String,
+}
 
-  /// Creates a `StorageObject` from bytes.
+/// Provides a service for object storage.
+///
+/// The trait includes methods for CRUD operations on storage objects.
+pub trait ObjectStorageService: Send + Sync + 'static {
+  /// Creates a new storage object.
   ///
   /// # Parameters
-  ///
-  /// * `name`: The name of the storage object.
-  /// * `bytes`: The byte data of the storage object.
-  /// * `mime`: The MIME type of the storage object.
-  ///
-  pub fn from_bytes<B: Into<Bytes>>(
-    workspace_id: &str,
-    file_name: &str,
-    bytes: B,
-    mime: String,
-  ) -> Self {
-    let bytes = bytes.into();
-    Self {
-      workspace_id: workspace_id.to_string(),
-      file_name: file_name.to_string(),
-      value: ObjectValue::Bytes { bytes, mime },
-    }
-  }
-
-  /// Gets the file size of the `StorageObject`.
+  /// - `url`: url of the object to be created.
   ///
   /// # Returns
-  ///
-  /// The file size in bytes.
-  pub fn file_size(&self) -> u64 {
-    match &self.value {
-      ObjectValue::File { file_path } => std::fs::metadata(file_path).unwrap().len(),
-      ObjectValue::Bytes { bytes, .. } => bytes.len() as u64,
-    }
-  }
-}
-
-pub enum ObjectValue {
-  File { file_path: String },
-  Bytes { bytes: Bytes, mime: String },
-}
-
-impl ObjectValue {
-  pub fn mime_type(&self) -> String {
-    match self {
-      ObjectValue::File { file_path } => mime_guess::from_path(file_path)
-        .first_or_octet_stream()
-        .to_string(),
-      ObjectValue::Bytes { mime, .. } => mime.clone(),
-    }
-  }
-}
+  /// - `Ok()`
+  /// - `Err(Error)`: An error occurred during the operation.
+  fn get_object_url(&self, object_id: ObjectIdentity) -> String;
 
-/// Provides a service for storing and managing files.
-///
-/// The trait includes methods for CRUD operations on storage objects.
-pub trait FileStorageService: Send + Sync + 'static {
   /// Creates a new storage object.
   ///
   /// # Parameters
-  /// - `object`: The object to be stored.
+  /// - `url`: url of the object to be created.
   ///
   /// # Returns
-  /// - `Ok(String)`: A url representing some kind of object identifier.
+  /// - `Ok()`
   /// - `Err(Error)`: An error occurred during the operation.
-  fn create_object(&self, object: StorageObject) -> FutureResult<String, FlowyError>;
+  fn put_object(&self, url: &str, object_value: ObjectValue) -> FutureResult<String, FlowyError>;
 
   /// Deletes a storage object by its URL.
   ///
   /// # Parameters
-  /// - `object_url`: The URL of the object to be deleted.
+  /// - `url`: url of the object to be deleted.
   ///
-  fn delete_object_by_url(&self, object_url: String) -> FutureResult<(), FlowyError>;
+  /// # Returns
+  /// - `Ok()`
+  /// - `Err(Error)`: An error occurred during the operation.
+  fn delete_object(&self, url: &str) -> FutureResult<(), FlowyError>;
 
   /// Fetches a storage object by its URL.
   ///
   /// # Parameters
-  /// - `object_url`: The URL of the object to be fetched.
+  /// - `url`: url of the object
   ///
-  fn get_object_by_url(&self, object_url: String) -> FutureResult<Bytes, FlowyError>;
-}
-
-pub trait FileStoragePlan: Send + Sync + 'static {
-  fn storage_size(&self) -> FutureResult<u64, FlowyError>;
-  fn maximum_file_size(&self) -> FutureResult<u64, FlowyError>;
-
-  fn check_upload_object(&self, object: &StorageObject) -> FutureResult<(), FlowyError>;
+  /// # Returns
+  /// - `Ok(File)`: The returned file object.
+  /// - `Err(Error)`: An error occurred during the operation.
+  fn get_object(&self, url: &str) -> FutureResult<ObjectValue, FlowyError>;
 }
